name: CI
on: [push]

jobs:
  setup: # We do this at the beginning and cache it, so that subsequent jobs don't all download on cache miss
    name: Install Yarn Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 14.x

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn --ignore-engines --prefer-offline

  commonwealth:
    needs: setup
    name: Commonwealth Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: packages/commonwealth

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: commonwealth
          POSTGRES_DB: commonwealth
          POSTGRES_PASSWORD: edgeware
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 14.x

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn --ignore-engines --prefer-offline

      - name: Install playwright browser drivers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Start server
        run: yarn start &
        env:
          PORT: 8090

      - name: Wait for server
        run: yarn wait-server
        env:
          PORT: 8090

      - name: Run e2e tests
        run: yarn test-e2e
        env:
          PORT: 8090

      - name: Typecheck
        run: yarn check-types

      - name: Run unit tests
        run: yarn unit-test

      - name: Run API tests
        run: yarn test-api
        env:
          NO_CLIENT: true

      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: coverage

  token-balance-cache:
    needs: setup
    name: Token Balance Cache Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/token-balance-cache

    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 14.x

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn --ignore-engines --prefer-offline

      - name: Run unit tests
        run: yarn test

  chain-events:
    needs: setup
    name: Chain Events Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/chain-events

    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 14.x

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn --ignore-engines --prefer-offline

      - name: Run unit tests
        run: yarn unit-test

      # TODO: fix integration tests -- they currently fail
      # - name: Run integration tests
      #  run: yarn integration-test

      # TODO: reintegrate code coverage once we get nyc working with hardhat

      # TODO: fix linter and then reintegrate using current ts version
      # - name: Run linter
      #   run: yarn lint
