config:
  plugins:
    metrics-by-endpoint:
      useOnlyRequestNames: true
      metricsNamespace: "latency_metrics"
    publish-metrics:
      - type: statsd
        prefix: "artillery.publish_metrics_plugin.{{$processEnvironment.ENV}}."
  environments:
    us:
      target: "https://us.unique.rocks"
    eu:
      target: "https://eu.unique.rocks"
    local:
      target: "http://localhost:8080"
    beta:
      target: "https://commonwealth-beta.herokuapp.com"
    frick:
      target: "https://commonwealth-frick.herokuapp.com"
    frack:
      target: "https://commonwealth-frack.herokuapp.com"
  http:
    extendedMetrics: true
  phases:
    - name: "Warm up"
      duration: 10
      arrivalRate: 5
  processor: "../functions.js" # Specify the path to the JavaScript file containing custom functions
scenarios:
  - name: "Read and write Endpoints"
    flow:
      - function: "generateRandomData"
      - get:
          url: "/"
      - get:
          url: "/api/domain"
      - get:
          url: "/api/status"
      - post:
          url: "/api/viewDiscussionNotifications"
          form:
            jwt: "{{$processEnvironment.JWT}}"
      - post:
          url: "/api/viewChainEventNotifications"
          form:
            jwt: "{{$processEnvironment.JWT}}"
      - post:
          url: "/api/getSubscribedChains"
          form:
            jwt: "{{$processEnvironment.JWT}}"
      - get:
          url: "/api/viewSubscriptions"
          qs:
            jwt: "{{$processEnvironment.JWT}}"
      - get:
          url: "/{{$processEnvironment.TEST_COMMUNITY}}"
      - get:
          url: "/api/bulkOffchain"
          qs:
            chain: "{{$processEnvironment.TEST_COMMUNITY}}"
            community:
            jwt: "{{$processEnvironment.JWT}}"
      - post:
          url: "/api/selectChain"
          form:
            chain: "{{$processEnvironment.TEST_COMMUNITY}}"
            auth: true
            jwt: "{{$processEnvironment.JWT}}"
      - post:
          url: "/api/threadsUsersCountAndAvatars"
          json:
            chain: "{{$processEnvironment.TEST_COMMUNITY}}"
            threads: []
      - get:
          url: "/api/bulkTopics"
          qs:
            chain: "{{$processEnvironment.TEST_COMMUNITY}}"
      - get:
          name: "/api/activeThreads"
          url: "/api/threads"
          qs:
            chain: "{{$processEnvironment.TEST_COMMUNITY}}"
            active: true
            threads_per_topic: 3
          capture:
            json: "$.result[*].id"
            as: "activeThreadIds"
      - log: "activeThreadIds {{activeThreadIds}}"
      - get:
          name: "/api/selectThread"
          url: "/api/threads"
          qs:
            thread_ids[]: "{{$processEnvironment.TEST_THREAD_ID}}"
            chain: "{{$processEnvironment.TEST_COMMUNITY}}"
          capture:
            json: "$.result[0].id"
            as: "threadId"
      - log: "threadId {{threadId}}" 
      - get:
          name: "/api/bulkThreads"
          url: "/api/threads"
          qs:
            chain: "{{$processEnvironment.TEST_COMMUNITY}}"
            bulk: true
            limit: 20
            page: 0
            includePinnedThreads: true
            to_date: "2023-07-05T06:39:12.543Z"
            orderBy: "createdAt:desc"
          capture:
            json: "$.result.threads[*].id"
            as: "threadIds"
      - log: "bulkThreadIds {{threadIds}}" 
      - post:
          url: "/api/reactionsCounts"
          json:
            thread_ids: "{{threadIds}}"
          capture:
            json: "$.result[*].thread_id"
            as: "reactionsCounts"
      - log: "reactionsCounts {{reactionsCounts}}"
      - post:
          url: "/api/viewUserActivity"
          form:
            jwt: "{{$processEnvironment.JWT}}"
      - post:
          url: "/api/viewGlobalActivity"
      - post:
          url: "/api/threads/{{$processEnvironment.TEST_THREAD_ID}}/comments"
          json:
            author_chain: "{{$processEnvironment.TEST_COMMUNITY}}"
            chain: "{{$processEnvironment.TEST_COMMUNITY}}"
            thread_id: {{$processEnvironment.TEST_THREAD_ID}}
            parent_id: null
            text: "%7B%22ops%22%3A%5B%7B%22insert%22%3A%22{{ comment }}%5Cn%22%7D%5D%2C%22___isMarkdown%22%3Atrue%7D"
            address: "{{$processEnvironment.USER_ADDRESS}}"
            canvas_action: "{}"
            canvas_session: "{}"
            canvas_hash: "0x0000000000000000000000000000000000000000000000000000000000000000"
            jwt: "{{$processEnvironment.JWT}}"
          capture:
            json: "$.result.id"
            as: "commentId"
      - log: "Captured ID: {{commentId}}"           
      - post:
          url: "/api/comments/{{commentId}}/reactions"
          form:
            author_chain: "{{$processEnvironment.TEST_COMMUNITY}}"
            chain: "{{$processEnvironment.TEST_COMMUNITY}}"
            address: "{{$processEnvironment.USER_ADDRESS}}"
            reaction: "like"
            jwt: "{{$processEnvironment.JWT}}"
            canvas_action: "{}"
            canvas_session: "{}"
            canvas_hash: "0x0000000000000000000000000000000000000000000000000000000000000000"
            comment_id: "{{commentId}}"